{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Limeutils is a small collection of classes and methods for dealing with Redis data (which comes in bytes and) and a few other helpful functions. Check out the documentation for information . More classes to be added. This package uses Pydantic models to validate its data. Installation Install with pip This is the recommended way to install Limeutils. pip install limeutils Install with repo pip install git + https : // github . com / dropkickdev / limeutils . git @develop #egg = limeutils Install with git clone Simply install from the root folder # This can also be a fork git clone https://github.com/dropkickdev/limeutils.git cd limeutils pip install .","title":"Home"},{"location":"#overview","text":"Limeutils is a small collection of classes and methods for dealing with Redis data (which comes in bytes and) and a few other helpful functions. Check out the documentation for information . More classes to be added. This package uses Pydantic models to validate its data.","title":"Overview"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-with-pip","text":"This is the recommended way to install Limeutils. pip install limeutils","title":"Install with pip"},{"location":"#install-with-repo","text":"pip install git + https : // github . com / dropkickdev / limeutils . git @develop #egg = limeutils","title":"Install with repo"},{"location":"#install-with-git-clone","text":"Simply install from the root folder # This can also be a fork git clone https://github.com/dropkickdev/limeutils.git cd limeutils pip install .","title":"Install with git clone"},{"location":"changelog/","text":"Mar20, 2021 Rename the Redis class to Red Simplify the Red instance to use basic commands like get() and set() Jan 15, 2020 Update docs and README Add more docstrings to pass the 80% minimum mark","title":"Changelog"},{"location":"changelog/#mar20-2021","text":"Rename the Redis class to Red Simplify the Red instance to use basic commands like get() and set()","title":"Mar20, 2021"},{"location":"changelog/#jan-15-2020","text":"Update docs and README Add more docstrings to pass the 80% minimum mark","title":"Jan 15, 2020"},{"location":"utils/","text":"Utilities Utilities API isfloat(val) Checks if the contents of a string is a float. Returns : bool val : String to check if it contains a float byte_conv(val) Converts bytes to a python string. This string could later be parsed into the correct python data type using parse_str() . Used mostly with Redis return values which always return in bytes. Returns : str val : Bytes value to convert parse_str(string) Converts a string to either an int, float, or str depending on its value. Does not support pickled values as you'll have to convert those separately. Works well with byte_conv() . Returns : String to convert string : int , float , or str split_fullname(fullname, default='', prefix=None, suffix=None) Splits a fullname into their respective first_name and last_name fields. If only one name is given, that becomes the first_name Returns : tuple containing the firstname and the lastname fullname : The name to split default : The value if only one name is given prefix : Custom prefixes to append to the default list suffix : Custom suffixes to append to the default list fullname = 'Eliza Maria Erica dona Aurora Phd Md' firstname , lastname = split_fullname ( fullname ) print ( firstname ) # Eliza Maria Erica print ( lastname ) # dona Aurora Phd Md Database API model_str(instance, attr) The attribute to display for an object's __str__ . If the attribute doesn't exist then an alternative will be displayed. Commonly used for ORMs but can be applied anywhere with classes. Returns : String name instance : Object of the class attr : Attribute of that object you want to use for its __str__ modstr(instance, attr) Alias for model_str(). classgrabber(dotpath) Import a class from a dot path string. Returns : The class itself which is found at the end of the dot path. # Import the Settings class from a string Settings = classgrabber ( ' app.folder.file.Settings ' ) # Settings class now ready for use myobj = Settings ()","title":"Utilities"},{"location":"utils/#utilities","text":"","title":"Utilities"},{"location":"utils/#utilities-api","text":"isfloat(val) Checks if the contents of a string is a float. Returns : bool val : String to check if it contains a float byte_conv(val) Converts bytes to a python string. This string could later be parsed into the correct python data type using parse_str() . Used mostly with Redis return values which always return in bytes. Returns : str val : Bytes value to convert parse_str(string) Converts a string to either an int, float, or str depending on its value. Does not support pickled values as you'll have to convert those separately. Works well with byte_conv() . Returns : String to convert string : int , float , or str split_fullname(fullname, default='', prefix=None, suffix=None) Splits a fullname into their respective first_name and last_name fields. If only one name is given, that becomes the first_name Returns : tuple containing the firstname and the lastname fullname : The name to split default : The value if only one name is given prefix : Custom prefixes to append to the default list suffix : Custom suffixes to append to the default list fullname = 'Eliza Maria Erica dona Aurora Phd Md' firstname , lastname = split_fullname ( fullname ) print ( firstname ) # Eliza Maria Erica print ( lastname ) # dona Aurora Phd Md","title":"Utilities API"},{"location":"utils/#database-api","text":"model_str(instance, attr) The attribute to display for an object's __str__ . If the attribute doesn't exist then an alternative will be displayed. Commonly used for ORMs but can be applied anywhere with classes. Returns : String name instance : Object of the class attr : Attribute of that object you want to use for its __str__ modstr(instance, attr) Alias for model_str(). classgrabber(dotpath) Import a class from a dot path string. Returns : The class itself which is found at the end of the dot path. # Import the Settings class from a string Settings = classgrabber ( ' app.folder.file.Settings ' ) # Settings class now ready for use myobj = Settings ()","title":"Database API"},{"location":"redis/api/","text":"Redis API get(key, **kwargs) Get the value of a key. To set the value of this key use set() . Returns : Can be string , int , float , byte , dict , list , or set . key : str key name kwargs : Choose from any of the custom keys below. start=0 : Starting index for lists end=-1 : Ending index for lists only= : For hashes only return the fields you need set(key, val, **kwargs) Create or update a new key. To read this key use get() . Returns : Varied depending on the value you set. key : str key name val : Can be string , int , float , byte , dict , list , or set kwargs : Custom keys set below. Accepts all other keys set in the parent redis package. clear=False : Delete the key first instead of updating it (if dict or list ) insert=end : For lists. Accepts the literal: start (for queue) or end (for stack). ex=-1 : Expiry in seconds exists(key) Check if the key exists. Returns : bool key : str key name","title":"Redis API"},{"location":"redis/api/#redis-api","text":"get(key, **kwargs) Get the value of a key. To set the value of this key use set() . Returns : Can be string , int , float , byte , dict , list , or set . key : str key name kwargs : Choose from any of the custom keys below. start=0 : Starting index for lists end=-1 : Ending index for lists only= : For hashes only return the fields you need set(key, val, **kwargs) Create or update a new key. To read this key use get() . Returns : Varied depending on the value you set. key : str key name val : Can be string , int , float , byte , dict , list , or set kwargs : Custom keys set below. Accepts all other keys set in the parent redis package. clear=False : Delete the key first instead of updating it (if dict or list ) insert=end : For lists. Accepts the literal: start (for queue) or end (for stack). ex=-1 : Expiry in seconds exists(key) Check if the key exists. Returns : bool key : str key name","title":"Redis API"},{"location":"redis/models/","text":"Pydantic Models Below are some custom data types used to make the code shorter from typing import Union # Custom data types LT = Union [ list , tuple ] V = Union [ str , int , float , bytes ] The LT and V data types are used throughout this package. Validators These work behind the scenes for the value of each key/field and are here for reference purposes. listmaker(val) Converts a str to a list with one item. nonone(val) Converts a None to empty string. nonone_mapping(val) Converts a None to empty string for dict . Models Pydantic models which validate the data. StarterModel Almost all other models have these fields so they were separated. class StarterModel ( BaseModel ): key : V pre : Optional [ V ] = '' ver : Optional [ V ] = '' ttl : Optional [ int ] = Field ( 0 , ge = 0 ) Get class Get ( StarterModel ): default : Optional [ Any ] = '' Hget class Hget ( StarterModel ): default : Optional [ Any ] = '' Hmget class Hmget ( StarterModel ): fields_ : Optional [ LT ] = None Hmset class Hmset ( StarterModel ): mapping : Optional [ dict ] = None _clean_mapping = validator ( 'mapping' , allow_reuse = True )( nonone_mapping ) Hset class Hset ( StarterModel ): field : str val : Optional [ V ] mapping : Optional [ dict ] = None _clean_val = validator ( 'val' , allow_reuse = True )( nonone ) _clean_mapping = validator ( 'mapping' , allow_reuse = True )( nonone_mapping ) Set class Set ( StarterModel ): val : Optional [ V ] = '' xx : bool = False keepttl : bool = False _clean_val = validator ( 'val' , allow_reuse = True )( nonone ) @validator ( 'xx' , 'keepttl' ) def boolonly ( cls , val ): return bool ( val )","title":"Pydantic Models"},{"location":"redis/models/#pydantic-models","text":"Below are some custom data types used to make the code shorter from typing import Union # Custom data types LT = Union [ list , tuple ] V = Union [ str , int , float , bytes ] The LT and V data types are used throughout this package.","title":"Pydantic Models"},{"location":"redis/models/#validators","text":"These work behind the scenes for the value of each key/field and are here for reference purposes. listmaker(val) Converts a str to a list with one item. nonone(val) Converts a None to empty string. nonone_mapping(val) Converts a None to empty string for dict .","title":"Validators"},{"location":"redis/models/#models","text":"Pydantic models which validate the data. StarterModel Almost all other models have these fields so they were separated. class StarterModel ( BaseModel ): key : V pre : Optional [ V ] = '' ver : Optional [ V ] = '' ttl : Optional [ int ] = Field ( 0 , ge = 0 ) Get class Get ( StarterModel ): default : Optional [ Any ] = '' Hget class Hget ( StarterModel ): default : Optional [ Any ] = '' Hmget class Hmget ( StarterModel ): fields_ : Optional [ LT ] = None Hmset class Hmset ( StarterModel ): mapping : Optional [ dict ] = None _clean_mapping = validator ( 'mapping' , allow_reuse = True )( nonone_mapping ) Hset class Hset ( StarterModel ): field : str val : Optional [ V ] mapping : Optional [ dict ] = None _clean_val = validator ( 'val' , allow_reuse = True )( nonone ) _clean_mapping = validator ( 'mapping' , allow_reuse = True )( nonone_mapping ) Set class Set ( StarterModel ): val : Optional [ V ] = '' xx : bool = False keepttl : bool = False _clean_val = validator ( 'val' , allow_reuse = True )( nonone ) @validator ( 'xx' , 'keepttl' ) def boolonly ( cls , val ): return bool ( val )","title":"Models"},{"location":"redis/quickstart/","text":"Redis Utilities The Red class uses the official redis python package in its methods. Limeutils acts as a wrapper simplifying the use of the package and parsing all data it returns into valid python data types. Quickstart Get yourself up and running from limeutils import Red # Create the redis object r = Red () # STRING r . set ( 'message' , 'Hello there' ) r . get ( 'message' ) # 'Hello there' r . set ( 'age' , 5 ) r . get ( 'age' ) # 5 (int) r . set ( 'total' , 12.5 ) r . get ( 'total' ) # 12.5 (float) # HASH r . set ( 'user' , dict ( username = 'jimmy' , age = 99 , gender = 'm' )) r . get ( 'user' ) # dict(username='jimmy', age=99, gender='m') r . set ( 'user' , dict ( username = 'foo' )) # Update r . get ( 'user' , only = [ 'username' , 'age' ]) # dict(username='foo', age=99) # LIST r . set ( 'names' , [ 'jimmy' , 'tina' ]) r . set ( 'names' , [ 'sam' ]) r . get ( 'names' ) # ['jimmy', 'tina', 'sam'] r . get ( 'names' , start = 1 , end =- 1 ) # ['tina', 'sam'] # Save and read a set r . set ( 'names' , { 'jimmy' , 'tina' }) r . get ( 'names' ) # {'jimmy', 'tina'} Setup Use Default settings from limeutils import Red r = Red () Use custom config from limeutils import Red CACHE_CONFIG = { 'pre' : 'FOOBAR' , 'ver' : 'v1' , 'ttl' : 3600 , } r = Red ( ** CACHE_CONFIG ) pre : Prefix for your key. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. ttl : Expires time for the key. Can be overridden in the set() method. Defaults to -1. clear_wrongtype : Allows using an existing key for a different data type (e.g. string -> dict ). Defaults to True . Setting this to False raises an exception whenever you try saving with a different data type than the one you started with. With connection information from limeutils import Red CACHE_CONFIG = { 'host' : 'localhost' , 'port' : 6379 , 'db' : 0 , 'pre' : 'FOOBAR' , 'ver' : 'v1' , 'ttl' : 3600 } r = Red ( ** CACHE_CONFIG ) If you don't include any connection information then the redis defaults will be used. Key Prefixes Limeutils lets you use prefixes for your keys allowing for better key management. Just add it when you create your object. r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) Keys are saved in the format prefix:version:key in redis. Creating a key named user in python is saved as FOOBAR:v1:user in redis. But when you need to use this key in python you only type the name user and the r object prepends the prefixes for you.","title":"Quickstart"},{"location":"redis/quickstart/#redis-utilities","text":"The Red class uses the official redis python package in its methods. Limeutils acts as a wrapper simplifying the use of the package and parsing all data it returns into valid python data types.","title":"Redis Utilities"},{"location":"redis/quickstart/#quickstart","text":"Get yourself up and running from limeutils import Red # Create the redis object r = Red () # STRING r . set ( 'message' , 'Hello there' ) r . get ( 'message' ) # 'Hello there' r . set ( 'age' , 5 ) r . get ( 'age' ) # 5 (int) r . set ( 'total' , 12.5 ) r . get ( 'total' ) # 12.5 (float) # HASH r . set ( 'user' , dict ( username = 'jimmy' , age = 99 , gender = 'm' )) r . get ( 'user' ) # dict(username='jimmy', age=99, gender='m') r . set ( 'user' , dict ( username = 'foo' )) # Update r . get ( 'user' , only = [ 'username' , 'age' ]) # dict(username='foo', age=99) # LIST r . set ( 'names' , [ 'jimmy' , 'tina' ]) r . set ( 'names' , [ 'sam' ]) r . get ( 'names' ) # ['jimmy', 'tina', 'sam'] r . get ( 'names' , start = 1 , end =- 1 ) # ['tina', 'sam'] # Save and read a set r . set ( 'names' , { 'jimmy' , 'tina' }) r . get ( 'names' ) # {'jimmy', 'tina'}","title":"Quickstart"},{"location":"redis/quickstart/#setup","text":"","title":"Setup"},{"location":"redis/quickstart/#use-default-settings","text":"from limeutils import Red r = Red ()","title":"Use Default settings"},{"location":"redis/quickstart/#use-custom-config","text":"from limeutils import Red CACHE_CONFIG = { 'pre' : 'FOOBAR' , 'ver' : 'v1' , 'ttl' : 3600 , } r = Red ( ** CACHE_CONFIG ) pre : Prefix for your key. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. ttl : Expires time for the key. Can be overridden in the set() method. Defaults to -1. clear_wrongtype : Allows using an existing key for a different data type (e.g. string -> dict ). Defaults to True . Setting this to False raises an exception whenever you try saving with a different data type than the one you started with.","title":"Use custom config"},{"location":"redis/quickstart/#with-connection-information","text":"from limeutils import Red CACHE_CONFIG = { 'host' : 'localhost' , 'port' : 6379 , 'db' : 0 , 'pre' : 'FOOBAR' , 'ver' : 'v1' , 'ttl' : 3600 } r = Red ( ** CACHE_CONFIG ) If you don't include any connection information then the redis defaults will be used.","title":"With connection information"},{"location":"redis/quickstart/#key-prefixes","text":"Limeutils lets you use prefixes for your keys allowing for better key management. Just add it when you create your object. r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) Keys are saved in the format prefix:version:key in redis. Creating a key named user in python is saved as FOOBAR:v1:user in redis. But when you need to use this key in python you only type the name user and the r object prepends the prefixes for you.","title":"Key Prefixes"}]}