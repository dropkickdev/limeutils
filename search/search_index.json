{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Install with pip This is the recommended way to install Limeutils. For pip users pip install limeutils For pipenv users pipenv install limeutils Install with git Install a fork","title":"Home"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-with-pip","text":"This is the recommended way to install Limeutils. For pip users pip install limeutils For pipenv users pipenv install limeutils","title":"Install with pip"},{"location":"#install-with-git","text":"","title":"Install with git"},{"location":"#install-a-fork","text":"","title":"Install a fork"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"redis/","text":"Redis Setup The Redis class uses the official redis package to implement its methods. This package returns all data in bytes. Limeutils acts as a wrapper silently parsing all this data into valid python data types you can use in your code. from limeutils import redis # Create the redis object r = redis.Redis(pre='FOOBAR', ver='v1') Add prefixes to your keys Limeutils lets you add prefixes to your keys automatically (recommended) allowing for better key management. r = redis.Redis(pre='FOOBAR', ver='v1') pre : Prefix for your project. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. This makes sure you won't overrite any other keys from other projects. !!! note eonutheoatnuhent Keys you create in your code are automatically saved in a prefix:version:key format. Creating a key named user in your code is saved as FOOBAR:v1:user in redis. When you need to use this key you only need to use the name user and the r object prepends the prefix and version used. You can also add details about your connection Adding redis connection info: r = redis.Redis(host='localhost', port=2468, db=0, pre='FOOBAR', ver='v1') Key prefixing It's recommended to use key prefixing in redis so including the pre and ver attributes does this for you. For example, the key user-123 is saved as FOOBAR:v1:user-123 but in your code you just type in user-123 and not the prefixed version. If you don't want to add any prefixing to your keys then just don't add them when instantiating your object: r = redis.Redis() . Quickstart from limeutils import redis # Create the redis object r = redis.Redis(pre='FOOBAR', ver='v1') # Save a key r.set('samplekey', 'hello there') # Read the key message = r.get('samplekey') # Save a hash r.hset('user-123', 'username', 'jimisthebomb') # Read the hash username = r.hget('user-123', 'username') Methods All methods are accessible from an instance of the Redis class. All methods are validated using the pydantic package. Below are some custom data types used to make the code shorter. ```python from typing import Union Custom data types LT = Union[list, tuple] V = Union[str, int, float, bytes] `` The LT and V` data types are used throughout this package. get() Something hget() Something hmget() Something hmset() Something hset() Something set(key: str, val: V, xx: bool = False, keepttl: bool = False, ttl=None, pre=None, ver=None ) {:.python} key : Key name val : Key value xx : Set to val only if key already exists keepttl : Retain the time to live associated with the key. ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the pre set in Redis() ver : Custom version. Overrides the ver set in Redis() hget()","title":"Redis"},{"location":"redis/#redis","text":"","title":"Redis"},{"location":"redis/#setup","text":"The Redis class uses the official redis package to implement its methods. This package returns all data in bytes. Limeutils acts as a wrapper silently parsing all this data into valid python data types you can use in your code. from limeutils import redis # Create the redis object r = redis.Redis(pre='FOOBAR', ver='v1')","title":"Setup"},{"location":"redis/#add-prefixes-to-your-keys","text":"Limeutils lets you add prefixes to your keys automatically (recommended) allowing for better key management. r = redis.Redis(pre='FOOBAR', ver='v1') pre : Prefix for your project. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. This makes sure you won't overrite any other keys from other projects. !!! note eonutheoatnuhent Keys you create in your code are automatically saved in a prefix:version:key format. Creating a key named user in your code is saved as FOOBAR:v1:user in redis. When you need to use this key you only need to use the name user and the r object prepends the prefix and version used. You can also add details about your connection Adding redis connection info: r = redis.Redis(host='localhost', port=2468, db=0, pre='FOOBAR', ver='v1')","title":"Add prefixes to your keys"},{"location":"redis/#key-prefixing","text":"It's recommended to use key prefixing in redis so including the pre and ver attributes does this for you. For example, the key user-123 is saved as FOOBAR:v1:user-123 but in your code you just type in user-123 and not the prefixed version. If you don't want to add any prefixing to your keys then just don't add them when instantiating your object: r = redis.Redis() .","title":"Key prefixing"},{"location":"redis/#quickstart","text":"from limeutils import redis # Create the redis object r = redis.Redis(pre='FOOBAR', ver='v1') # Save a key r.set('samplekey', 'hello there') # Read the key message = r.get('samplekey') # Save a hash r.hset('user-123', 'username', 'jimisthebomb') # Read the hash username = r.hget('user-123', 'username')","title":"Quickstart"},{"location":"redis/#methods","text":"All methods are accessible from an instance of the Redis class. All methods are validated using the pydantic package. Below are some custom data types used to make the code shorter. ```python from typing import Union","title":"Methods"},{"location":"redis/#custom-data-types","text":"LT = Union[list, tuple] V = Union[str, int, float, bytes] `` The LT and V` data types are used throughout this package. get() Something hget() Something hmget() Something hmset() Something hset() Something set(key: str, val: V, xx: bool = False, keepttl: bool = False, ttl=None, pre=None, ver=None ) {:.python} key : Key name val : Key value xx : Set to val only if key already exists keepttl : Retain the time to live associated with the key. ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the pre set in Redis() ver : Custom version. Overrides the ver set in Redis() hget()","title":"Custom data types"},{"location":"utils/","text":"Utils file","title":"Utils"},{"location":"utils/#utils-file","text":"","title":"Utils file"}]}