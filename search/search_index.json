{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Install with pip This is the recommended way to install Limeutils. For pip users pip install limeutils For pipenv users pipenv install limeutils Install with git Install a fork","title":"Home"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-with-pip","text":"This is the recommended way to install Limeutils. For pip users pip install limeutils For pipenv users pipenv install limeutils","title":"Install with pip"},{"location":"#install-with-git","text":"","title":"Install with git"},{"location":"#install-a-fork","text":"","title":"Install a fork"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"utils/","text":"Utils file","title":"Utilities"},{"location":"utils/#utils-file","text":"","title":"Utils file"},{"location":"redis/api/","text":"Redis The Redis() class uses the official redis python package in its methods. Limeutils acts as a wrapper parsing all data it returns into valid python data types. Quickstart Get yourself up and running from limeutils import redis # Create the redis object r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) # Save a key r . set ( 'samplekey' , 'hello there' ) # Read the key message = r . get ( 'samplekey' ) # Save a hash r . hset ( 'user-123' , 'username' , 'jimisawesome' ) # Read the hash username = r . hget ( 'user-123' , 'username' ) Setup from limeutils import redis # Create the redis object r = redis . Redis () With connection information r = redis . Redis ( host = 'localhost' , port = 2468 , db = 0 ) If you don't include any connection information then the redis defaults will be used. Key Prefixes Limeutils lets you use prefixes for your keys allowing for better key management. r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) pre : Prefix for your project. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. This makes sure you won't overrite any keys from other projects. Info Keys you create are automatically saved in the prefix:version:key format (if you used the arguments pre , ver , or both). Creating a key named user in python is saved as FOOBAR:v1:user in redis. But when you need to use this key in your python code you only type the name user and the r object prepends the prefixes for you. If you don't want to use any prefixing just don't use the pre and ver arguments when creating the object. This would mean your original key of user in pyhon would also be saved as user in redis. Redis API All methods are accessible from an instance of the Redis class. These are all validated using Pydantic models. get(key, default='', pre=None, ver=None) Get the value of a single non-hash key. To set the value of this key use set() . Returns : Union[str, int, float] key : Key name default : Use this value if key doesn't exist pre : Custom prefix. Overrides the prefix set when you created the object. ver : Custom version. Overrides the version set when you created the object. hget() To follow hmget() To follow hmset() To follow hset(key, field, val='', mapping=None, ttl=None, pre=None, ver=None) Add a single field to a hash key. If the key doesn't exist it is created. Returns : int Number of fields set. Updating an existing field counts as 0 not 1. key : Key name field : Field name val : Key value. See custom data type . mapping : Dict of field-val pairs ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the prefix set when you created the object. ver : Custom version. Overrides the version set when you created the object. set(key, val='', xx=False, keepttl=False, ttl=None, pre=None, ver=None) Create or update a single non-hash key. To read this key use get() . Returns : int Number of keys created. Updated keys aren't counted. key : Key name val : Key value. See custom data type . xx : Set to val only if key already exists keepttl : Retain the time to live associated with the key. ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the prefix set when you created the object. ver : Custom version. Overrides the version set when you created the object. hget()","title":"Redis API"},{"location":"redis/api/#redis","text":"The Redis() class uses the official redis python package in its methods. Limeutils acts as a wrapper parsing all data it returns into valid python data types.","title":"Redis"},{"location":"redis/api/#quickstart","text":"Get yourself up and running from limeutils import redis # Create the redis object r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) # Save a key r . set ( 'samplekey' , 'hello there' ) # Read the key message = r . get ( 'samplekey' ) # Save a hash r . hset ( 'user-123' , 'username' , 'jimisawesome' ) # Read the hash username = r . hget ( 'user-123' , 'username' )","title":"Quickstart"},{"location":"redis/api/#setup","text":"from limeutils import redis # Create the redis object r = redis . Redis () With connection information r = redis . Redis ( host = 'localhost' , port = 2468 , db = 0 ) If you don't include any connection information then the redis defaults will be used.","title":"Setup"},{"location":"redis/api/#key-prefixes","text":"Limeutils lets you use prefixes for your keys allowing for better key management. r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) pre : Prefix for your project. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. This makes sure you won't overrite any keys from other projects. Info Keys you create are automatically saved in the prefix:version:key format (if you used the arguments pre , ver , or both). Creating a key named user in python is saved as FOOBAR:v1:user in redis. But when you need to use this key in your python code you only type the name user and the r object prepends the prefixes for you. If you don't want to use any prefixing just don't use the pre and ver arguments when creating the object. This would mean your original key of user in pyhon would also be saved as user in redis.","title":"Key Prefixes"},{"location":"redis/api/#redis-api","text":"All methods are accessible from an instance of the Redis class. These are all validated using Pydantic models. get(key, default='', pre=None, ver=None) Get the value of a single non-hash key. To set the value of this key use set() . Returns : Union[str, int, float] key : Key name default : Use this value if key doesn't exist pre : Custom prefix. Overrides the prefix set when you created the object. ver : Custom version. Overrides the version set when you created the object. hget() To follow hmget() To follow hmset() To follow hset(key, field, val='', mapping=None, ttl=None, pre=None, ver=None) Add a single field to a hash key. If the key doesn't exist it is created. Returns : int Number of fields set. Updating an existing field counts as 0 not 1. key : Key name field : Field name val : Key value. See custom data type . mapping : Dict of field-val pairs ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the prefix set when you created the object. ver : Custom version. Overrides the version set when you created the object. set(key, val='', xx=False, keepttl=False, ttl=None, pre=None, ver=None) Create or update a single non-hash key. To read this key use get() . Returns : int Number of keys created. Updated keys aren't counted. key : Key name val : Key value. See custom data type . xx : Set to val only if key already exists keepttl : Retain the time to live associated with the key. ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the prefix set when you created the object. ver : Custom version. Overrides the version set when you created the object. hget()","title":"Redis API"},{"location":"redis/models/","text":"Pydantic Models Below are some custom data types used to make the code shorter from typing import Union # Custom data types LT = Union [ list , tuple ] V = Union [ str , int , float , bytes ] The LT and V data types are used throughout this package.","title":"Models"},{"location":"redis/models/#pydantic-models","text":"Below are some custom data types used to make the code shorter from typing import Union # Custom data types LT = Union [ list , tuple ] V = Union [ str , int , float , bytes ] The LT and V data types are used throughout this package.","title":"Pydantic Models"}]}