{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Install with pip This is the recommended way to install Limeutils. For pip users pip install limeutils For pipenv users pipenv install limeutils Install with git Install a fork","title":"Home"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-with-pip","text":"This is the recommended way to install Limeutils. For pip users pip install limeutils For pipenv users pipenv install limeutils","title":"Install with pip"},{"location":"#install-with-git","text":"","title":"Install with git"},{"location":"#install-a-fork","text":"","title":"Install a fork"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"redis/","text":"Redis Quickstart Get yourself up and running from limeutils import redis # Create the redis object r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) # Save a key r . set ( 'samplekey' , 'hello there' ) # Read the key message = r . get ( 'samplekey' ) # Save a hash r . hset ( 'user-123' , 'username' , 'jimisawesome' ) # Read the hash username = r . hget ( 'user-123' , 'username' ) View the API below for complete details including how to save multiple fields in one go with hmget() . Setup The Redis() class uses the official redis package to implement its methods. This package returns all data in bytes. Limeutils acts as a wrapper silently parsing all this data into valid python data types you can use in your code. from limeutils import redis # Create the redis object r = redis . Redis () With connection information r = redis . Redis ( host = 'localhost' , port = 2468 , db = 0 ) If you don't include any connection information then the redis defaults will be used. Key Prefixes Limeutils lets you add prefixes to your keys allowing for better key management. r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) pre : Prefix for your project. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. This makes sure you won't overrite any keys from other projects. Info Keys you create are automatically saved in the prefix:version:key format (if you used the arguments pre , ver , or both). Creating a key named user in python is saved as FOOBAR:v1:user in redis. When you need to use this key you only need to use the name user and the r object prepends the prefix and version for you. If you don't want to use any prefixing just don't use the pre and ver arguments when creating the object. This would mean your original key of user in your code would be saved also as user in redis. If you don't want to use prefixing in your keys then just don't add them when instantiating your object: r = redis.Redis() . Redis API All methods are accessible from an instance of the Redis class. These are all validated using Pydantic . Below are some custom data types used to make the code shorter from typing import Union # Custom data types LT = Union [ list , tuple ] V = Union [ str , int , float , bytes ] The LT and V data types are used throughout this package. get(key: str, default: Optional[Any] = '', pre=None, ver=None) Get the value of a non-hash key. hget() To follow hmget() To follow hmset() To follow hset() To follow set(key: str, val: V, xx: bool = False, keepttl: bool = False, ttl=None, pre=None, ver=None) key : Key name val : Key value xx : Set to val only if key already exists keepttl : Retain the time to live associated with the key. ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the pre set in Redis() ver : Custom version. Overrides the ver set in Redis() hget()","title":"Redis"},{"location":"redis/#redis","text":"","title":"Redis"},{"location":"redis/#quickstart","text":"Get yourself up and running from limeutils import redis # Create the redis object r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) # Save a key r . set ( 'samplekey' , 'hello there' ) # Read the key message = r . get ( 'samplekey' ) # Save a hash r . hset ( 'user-123' , 'username' , 'jimisawesome' ) # Read the hash username = r . hget ( 'user-123' , 'username' ) View the API below for complete details including how to save multiple fields in one go with hmget() .","title":"Quickstart"},{"location":"redis/#setup","text":"The Redis() class uses the official redis package to implement its methods. This package returns all data in bytes. Limeutils acts as a wrapper silently parsing all this data into valid python data types you can use in your code. from limeutils import redis # Create the redis object r = redis . Redis () With connection information r = redis . Redis ( host = 'localhost' , port = 2468 , db = 0 ) If you don't include any connection information then the redis defaults will be used.","title":"Setup"},{"location":"redis/#key-prefixes","text":"Limeutils lets you add prefixes to your keys allowing for better key management. r = redis . Redis ( pre = 'FOOBAR' , ver = 'v1' ) pre : Prefix for your project. Defaults to an empty string. ver : Version for your key. Defaults to an empty string. This makes sure you won't overrite any keys from other projects. Info Keys you create are automatically saved in the prefix:version:key format (if you used the arguments pre , ver , or both). Creating a key named user in python is saved as FOOBAR:v1:user in redis. When you need to use this key you only need to use the name user and the r object prepends the prefix and version for you. If you don't want to use any prefixing just don't use the pre and ver arguments when creating the object. This would mean your original key of user in your code would be saved also as user in redis. If you don't want to use prefixing in your keys then just don't add them when instantiating your object: r = redis.Redis() .","title":"Key Prefixes"},{"location":"redis/#redis-api","text":"All methods are accessible from an instance of the Redis class. These are all validated using Pydantic . Below are some custom data types used to make the code shorter from typing import Union # Custom data types LT = Union [ list , tuple ] V = Union [ str , int , float , bytes ] The LT and V data types are used throughout this package.","title":"Redis API"},{"location":"redis/#getkey-str-default-optionalany-prenone-vernone","text":"Get the value of a non-hash key.","title":"get(key: str, default: Optional[Any] = '', pre=None, ver=None)"},{"location":"redis/#hget","text":"To follow","title":"hget()"},{"location":"redis/#hmget","text":"To follow","title":"hmget()"},{"location":"redis/#hmset","text":"To follow","title":"hmset()"},{"location":"redis/#hset","text":"To follow","title":"hset()"},{"location":"redis/#setkey-str-val-v-xx-bool-false-keepttl-bool-false-ttlnone-prenone-vernone","text":"key : Key name val : Key value xx : Set to val only if key already exists keepttl : Retain the time to live associated with the key. ttl : TTL for this key. Can be in int seconds or a timedelta object. pre : Custom prefix. Overrides the pre set in Redis() ver : Custom version. Overrides the ver set in Redis() hget()","title":"set(key: str, val: V, xx: bool = False, keepttl: bool = False, ttl=None, pre=None, ver=None)"},{"location":"utils/","text":"Utils file","title":"Utils"},{"location":"utils/#utils-file","text":"","title":"Utils file"}]}